{"version":3,"sources":["modules/BasicModule.js","modules/BasicPropsModule.js","modules/DefaultPropsModule.js","modules/StateModule.js","modules/StateArrayModule.js","App.js","serviceWorker.js","index.js"],"names":["BasicModule","className","BasicPropsModule","props","value","DefaultPropsModule","otherValue","StateModule","useState","count","setCount","onClick","StateArrayModule","birdsArray","birds","setBirds","map","bird","i","key","onInput","e","filter","includes","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAUeA,G,KARK,WAChB,OACI,yBAAKC,UAAU,aACX,mFCMGC,EATU,SAACC,GACtB,OACI,yBAAKF,UAAU,aACX,2DACA,wDAA6B,2BAAIE,EAAMC,OAAvC,8BCMGC,EAVY,SAACF,GACxB,OACI,yBAAKF,UAAU,aACX,mEACA,wDAA6B,2BAAIE,EAAMC,OAAU,6BAAjD,8DACA,sGAA2E,2BAAID,EAAMG,YAAc,6B,OCOhGC,EAZK,SAACJ,GAAW,IAAD,EACDK,mBAAS,GADR,mBACpBC,EADoB,KACbC,EADa,KAG3B,OACI,yBAAKT,UAAU,aACX,2DACA,yEAA8C,2BAAIQ,IAClD,4BAAQE,QAAU,WAAOD,EAASD,EAAQ,KAA1C,qBCaGG,G,MAnBU,WACrB,IAAMC,EAAa,CAAC,UAAW,cAAe,aADnB,EAEDL,mBAAUK,GAFT,mBAEpBC,EAFoB,KAEbC,EAFa,KAU3B,OACI,yBAAKd,UAAU,yBACX,wEACA,2BAAIa,EAAME,KAAK,SAACC,EAAMC,GAAP,OAAa,wBAAIC,IAAKD,GAAID,OACzC,2BAAOG,QAVf,SAAqBC,GACjBN,EACIF,EAAWS,QAAQ,SAAEL,GAAF,OAAYA,EAAKM,SAASF,EAAEG,OAAOpB,iBCgBnDqB,EAjBH,WACV,OACE,yBAAKxB,UAAU,OACb,sCACA,qGACA,yBAAKA,UAAU,cACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAkBG,MAAM,SACxB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCNYsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.58baebb5.chunk.js","sourcesContent":["import React from 'react'\n\nconst BasicModule = () => {\n    return(\n        <div className=\"submodule\">\n            <h2>This is the first and most basic module possible</h2>\n        </div>\n    )\n}\n\nexport default BasicModule","import React from 'react'\n\nconst BasicPropsModule = (props) => {\n    return(\n        <div className=\"submodule\">\n            <h2>This is a module with props</h2>\n            <p>- it receives this value: <b>{props.value}</b>, from the parent App.js</p> \n        </div>\n    )\n}\n\nexport default BasicPropsModule","import React from 'react'\n\nconst DefaultPropsModule = (props) => {\n    return(\n        <div className=\"submodule\">\n            <h2>This is a module with default props</h2>\n            <p>- it receives this value: <b>{props.value}</b><br/> (you´re right, nothing there), from the parent App.js.</p> \n            <p>Instead we can use a default props value, as we have done for this one: <b>{props.otherValue || \"I'm the default value!\"}</b></p> \n        </div>\n    )\n}\n\nexport default DefaultPropsModule","import React, {useState} from 'react'\n\nconst StateModule = (props) => {\n    const [count, setCount] = useState(0)\n\n    return(\n        <div className=\"submodule\">\n            <h2>This is a module with state</h2>\n            <p>We use state to set values - i.e a number: <b>{count}</b></p>\n            <button onClick={ () => {setCount(count + 1)} }>Hit me to count</button> \n        </div>\n    )\n}\n\nexport default StateModule","import React, {useState} from 'react'\nimport './StateArrayModule.css';\n\nconst StateArrayModule = () => {\n    const birdsArray = [\"seagull\", \"hummingbird\", \"blackbird\"]\n    const [birds, setBirds] = useState( birdsArray )\n\n    function filterBirds(e){\n        setBirds(\n            birdsArray.filter( ( bird ) => bird.includes(e.target.value)  )\n        ) \n    }\n\n    return(\n        <div className=\"submodule state-array\">\n            <h2>This module let´s you filter an array</h2>\n            <p>{birds.map( (bird, i) => <li key={i}>{bird}</li> )}</p>\n            <input onInput={ filterBirds } />  \n        </div>\n    )\n}\n\nexport default StateArrayModule","import React from 'react'\n\nimport BasicModule from './modules/BasicModule'\nimport BasicPropsModule from './modules/BasicPropsModule'\nimport DefaultPropsModule from './modules/DefaultPropsModule'\nimport StateModule from './modules/StateModule'\nimport StateArrayModule from './modules/StateArrayModule'\n\nconst App = () => {\n  return(\n    <div className=\"app\">\n      <h1>App.js</h1>\n      <p>App.js is the parent file in a hierarchy of submodules we will create.</p> \n      <div className=\"submodules\">\n        <BasicModule />\n        <BasicPropsModule value=\"pink\"/>\n        <DefaultPropsModule />\n        <StateModule />\n        <StateArrayModule />\n\n      </div>\n    </div>\n  )\n}\n\nexport default App\n\n/* \nGITHUB PAGES DEPLOY STEPS \n\nPush repo to github and create a github pages branch from master\n\nCopy the URL of the branch - https://simmoe.github.io/react-course/\n\nInstall github-pages node module from the folder terminal: npm install gh-pages --save \n\nLocate the package.json file in your root directory, add this line of code to the top of the object: \"homepage\": \"link-to-your-repository\", and save.\n\nIn your package.json file, locate “scripts” add these lines of code:\n{\n   ...\n   \"predeploy\": \"yarn run build\",\n   \"deploy\": \"gh-pages -d build\",\n   ...\n}\n\nnow go to github.com and SWITCH the branch to gh-pages branch \n\npush/wait.......\n\n*/\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}